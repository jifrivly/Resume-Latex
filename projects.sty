\section*{Project Details}

\subsection*{1. GTM Dashboard}
\textbf{Client:} Telstra, Australia's leading telecommunications company \\
\textbf{Description:} The GTM Cloud Customer Operations Dashboard is a comprehensive web application developed to streamline customer operations. The system consists of a single user interface (UI) and three Backend-for-Frontend (BFF) microservices that interact with various upstream APIs, ensuring efficient data processing and presentation. This architecture provides a seamless experience for Telstra's customer operations teams, enabling them to manage and optimize services for millions of Australian customers.

\textbf{Role:} Senior Full Stack Developer \\
\textbf{Responsibilities:}
\begin{itemize}
    \item Contributed to the development of both frontend and backend components
    \item Implemented features across the UI and 3 BFF microservices
    \item Designed and implemented RESTful APIs for the BFF microservices
    \item Integrated the system with upstream APIs
    \item Optimized database queries and improved overall application performance
    \item Ensured code quality and adherence to best practices
    \item Implemented logging and monitoring solutions for improved system observability
    \item Implemented security measures and data validation across the application
    \item Participated in the full software development lifecycle, including design, implementation, testing, and deployment
    \item Conducted code reviews and mentored junior developers
    \item Managed deployments and infrastructure using Bamboo and Pivotal Cloud Foundry (PCF)
    \item Troubleshot and resolved complex issues in production environments
    \item Implemented automated testing strategies, including unit and integration tests
    \item Participated in architecture discussions and contributed to system design decisions
    \item Participated in Agile ceremonies and contributed to sprint planning and estimation
\end{itemize}

\textbf{Technical Details:}
\begin{itemize}
    \item \textbf{Frontend:}
    \begin{itemize}
        \item Vue.js for building the user interface
        \item Vuetify for UI components and styling
        \item Vuex for state management
        \item Vue Router for navigation
    \end{itemize}
    \item \textbf{Backend:}
    \begin{itemize}
        \item Node.js with Express.js framework for building RESTful APIs
        \item Joi for request validation and Winston for logging
        \item PostgreSQL as the primary database with Sequelize ORM for database interactions
    \end{itemize}
    \item \textbf{DevOps and Infrastructure:}
    \begin{itemize}
        \item Pivotal Cloud Foundry (PCF) for application deployment and management
        \item Bamboo for continuous integration and deployment
        \item SonarQube for code quality and security analysis
        \item Docker for containerization
        \item Veracode for application security testing
        \item New Relic for application performance monitoring
    \end{itemize}
\end{itemize}

\subsection*{2. Pingar Content Insight}
\textbf{Client:} Pingar \\
\textbf{Description:} Pingar Content Insights is an advanced data analytics tool developed as an enhancement layer for an existing Pingar solution. Built on top of the client's DiscoveryOne database, this application serves as a dedicated search engine with enhanced capabilities for discovering and analyzing insights from the original dataset. It provides users with powerful tools to explore, visualize, and extract meaningful information from large volumes of content, enabling more informed decision-making and a deeper understanding of data patterns.

\textbf{Role:} Frontend Developer with additional responsibilities in database design and backend support \\
\textbf{Responsibilities:}
\begin{itemize}
    \item Gathered and analyzed customer requirements to inform development decisions
    \item Implemented state management using Redux Toolkit for efficient data flow
    \item Designed and developed reusable, readable, and unit-tested React components
    \item Implemented code splitting and lazy loading techniques to optimize application performance
    \item Integrated Amcharts for data visualization and connected it with backend APIs
    \item Handled API integration using Axios for seamless data communication
    \item Contributed to database design, ensuring optimal structure for frontend data needs
    \item Integrated Microsoft AD FS UI into the application for seamless user login
    \item Customized and implemented the authentication UI using legacy JavaScript, HTML, and CSS
    \item Assisted in troubleshooting and resolving backend issues
    \item Implemented SAML authentication for secure user access
    \item Collaborated with the backend team to design and optimize API endpoints
    \item Participated in code reviews and provided constructive feedback to team members
    \item Implemented responsive design to ensure compatibility across various devices
    \item Optimized frontend performance through efficient rendering and state management
    \item Contributed to the development of user documentation and guides
\end{itemize}

\textbf{Technical Details:}
\begin{itemize}
    \item \textbf{Frontend:}
    \begin{itemize}
        \item ReactJS for building the user interface
        \item Redux Toolkit for state management
        \item Amcharts for data visualization
        \item Axios for API integration
        \item Jest and React Testing Library for unit testing
        \item Code splitting and lazy loading for performance optimization
    \end{itemize}
    \item \textbf{Backend:}
    \begin{itemize}
        \item .NET framework for server-side logic
        \item RESTful API design and implementation
        \item Elasticsearch for efficient full-text search and analytics
        \item PostgreSQL for relational data storage
    \end{itemize}
    \item \textbf{Authentication:}
    \begin{itemize}
        \item Microsoft account-based authentication, using Azure Active Directory Federation Services (AD FS)
        \item SAML (Security Assertion Markup Language) protocol for secure, federated authentication
        \item Integration of Microsoft AD FS UI in the application, set up on the client's server
        \item Custom implementation of the authentication UI using legacy JavaScript, HTML, and CSS
    \end{itemize}
    \item \textbf{Development Practices:}
    \begin{itemize}
        \item Agile methodology with regular sprints and stand-ups
        \item Version control using Git
        \item Continuous Integration/Continuous Deployment (CI/CD) pipeline
    \end{itemize}
\end{itemize}

\subsection*{3. V-Audit}
\textbf{Description:} V-Audit is an advanced software solution designed to automatically detect anomalies in live or recorded video feeds. The system utilizes AI technology to identify various scenarios such as individuals wearing helmets in ATMs, hotel employees not wearing required head coverings, or unauthorized personnel entering restricted areas. Upon detection, the system automatically raises tickets for these anomalies. Additionally, V-Audit provides functionality for auditing users to manually raise tickets when necessary. This comprehensive approach enhances security monitoring and compliance in various environments.

\textbf{Role:} Front End Developer \\
\textbf{Responsibilities:}
\begin{itemize}
    \item Contributed to the project from its inception, playing a key role in its development
    \item Participated in system architectural design, helping to shape the overall structure of the application
    \item Led UI development, deployment, and maintenance efforts
    \item Led the Angular framework upgrades from version 10 to 11, and subsequently to version 13, ensuring smooth transitions and leveraging new features
    \item Debugged both client-side and server-side issues, including Java and Python code
    \item Implemented data visualization features using D3.js
    \item Ensured responsive and accessible design using Semantic HTML and Bootstrap
    \item Optimized application performance and user experience
    \item Collaborated with backend developers to integrate frontend with Java and Django backends
    \item Participated in code reviews and maintained coding standards
    \item Assisted in troubleshooting cross-functional issues spanning the entire stack
\end{itemize}

\textbf{Technical Details:}
\begin{itemize}
    \item \textbf{Frontend:}
    \begin{itemize}
        \item Angular framework for building the user interface
        \item TypeScript for type-safe JavaScript development
        \item RxJS for reactive programming and handling asynchronous data streams
        \item Bootstrap for responsive design and UI components
        \item D3.js for advanced data visualization
        \item Semantic HTML for improved accessibility and SEO
    \end{itemize}
    \item \textbf{Backend:}
    \begin{itemize}
        \item AI Backend: Custom AI service for video analysis and anomaly detection
        \item API Gateway: Python Django-based service for routing and managing API requests
        \item BFF (Backend for Frontend): Python Django-based service tailored for frontend needs, integrating with upstream AI backend APIs
        \item Java for additional backend services
    \end{itemize}
    \item \textbf{Database:}
    \begin{itemize}
        \item MySQL for data storage and management
    \end{itemize}
    \item \textbf{Development Practices:}
    \begin{itemize}
        \item Version control Git
        \item Agile methodology (implied by involvement from project inception)
    \end{itemize}
\end{itemize}

\subsection*{4. IOScope}
\textbf{Description:} IOScope is a sophisticated software system designed to manage and monitor high-frequency I/O devices, particularly semiconductor devices such as SuperIor. The system is engineered to handle large volumes of data with minimal latency, ensuring accurate and timely data processing. IOScope provides detailed insights into device performance, allowing engineers and operators to make informed decisions about device usage and maintenance.

\textbf{Role:} Frontend Developer with contributions to database design \\
\textbf{Responsibilities:}
\begin{itemize}
    \item Developed and maintained frontend components using Angular, ensuring smooth user interactions
    \item Implemented responsive design using Material Design to enhance user experience
    \item Designed and optimized database schema, focusing on the frontend's data requirements
    \item Debugged and resolved issues related to both frontend and database components
    \item Worked on data visualization using Angular components, enhancing user understanding of device performance
    \item Collaborated with backend developers to integrate frontend with Java-based backend services
    \item Participated in system testing and quality assurance activities
    \item Assisted in troubleshooting issues in the production environment
\end{itemize}

\textbf{Technical Details:}
\begin{itemize}
    \item \textbf{Frontend:}
    \begin{itemize}
        \item Angular framework for building the user interface
        \item TypeScript for type-safe JavaScript development
        \item Angular Material for UI components following Material Design principles
        \item RxJS for managing asynchronous data streams
    \end{itemize}
    \item \textbf{Backend:}
    \begin{itemize}
        \item Java-based backend services for processing and managing data from high-frequency devices
    \end{itemize}
    \item \textbf{Database:}
    \begin{itemize}
        \item MySQL for relational data storage and management
        \item Database schema design focusing on efficient data retrieval and minimal latency
    \end{itemize}
    \item \textbf{Development Practices:}
    \begin{itemize}
        \item Version control using Git
        \item Agile methodology (implied by iterative development and testing practices)
    \end{itemize}
\end{itemize}

\subsection*{5. CoWallet}
\textbf{Description:} CoWallet is an innovative platform that offers a shared digital wallet service. It enables users to collectively save, manage, and spend money in a group setting, facilitating shared financial goals and expenses. The platform includes features such as real-time balance updates, group spending analysis, and secure transaction handling, all presented through a user-friendly interface.

\textbf{Role:} Full Stack Developer \\
\textbf{Responsibilities:}
\begin{itemize}
    \item Contributed to the development of both the frontend and backend components of the application
    \item Integrated third-party payment gateways for seamless transaction handling
    \item Designed and implemented features for managing shared financial goals and expenses
    \item Developed real-time balance update functionality using WebSocket and Node.js
    \item Implemented group spending analysis features, providing users with insights into their spending habits
    \item Ensured secure transaction handling by implementing encryption and other security measures
    \item Optimized the application's performance to handle high traffic and large transactions
    \item Collaborated with UI/UX designers to ensure a user-friendly interface
    \item Participated in the full software development lifecycle, including design, implementation, testing, and deployment
    \item Implemented responsive design to ensure compatibility across various devices
    \item Managed deployments and infrastructure using DigitalOcean and Nginx
\end{itemize}

\textbf{Technical Details:}
\begin{itemize}
    \item \textbf{Frontend:}
    \begin{itemize}
        \item React.js for building the user interface
        \item Redux for state management
        \item Material-UI for UI components and styling
    \end{itemize}
    \item \textbf{Backend:}
    \begin{itemize}
        \item Node.js with Express.js framework for building RESTful APIs
        \item WebSocket for real-time communication
        \item MongoDB for NoSQL data storage
        \item Mongoose for object data modeling (ODM)
    \end{itemize}
    \item \textbf{DevOps and Infrastructure:}
    \begin{itemize}
        \item DigitalOcean for hosting and infrastructure management
        \item Nginx for server configuration and load balancing
        \item CI/CD pipeline setup for automated deployments
    \end{itemize}
\end{itemize}